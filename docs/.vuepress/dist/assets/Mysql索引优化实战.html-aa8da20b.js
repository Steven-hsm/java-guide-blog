import{_ as n,p as s,q as a,a1 as e}from"./framework-8fa3e4ce.js";const t={},l=e(`<h3 id="_1-数据准备" tabindex="-1"><a class="header-anchor" href="#_1-数据准备" aria-hidden="true">#</a> 1.数据准备</h3><p><strong>创建表</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;职位&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>hire_time<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;入职时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_name_age_position<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;员工记录表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化数据</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;LiLei&#39;,22,&#39;manager&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;HanMeimei&#39;, 23,&#39;dev&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;Lucy&#39;,23,&#39;dev&#39;,NOW());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化10000条数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--  插入100000条示例数据</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> insert_emp<span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insert_emp<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
	<span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">do</span>
		<span class="token keyword">insert</span> <span class="token keyword">into</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;zhuge&#39;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">call</span> insert_emp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-简单例子" tabindex="-1"><a class="header-anchor" href="#_2-简单例子" aria-hidden="true">#</a> 2.简单例子</h3><ul><li><p>联合索引第一个字段用范围不会走索引 <code>idx_name_age_position</code> (<code>name</code>,<code>age</code>,<code>position</code>)</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT * FROM employees WHERE name &gt; &#39;LiLei&#39; AND age = 22 AND position =&#39;manager&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里如果根据联合idx_name_age_position，只能命中name字段，结果集很大，考虑到 <code>select * </code>,获取到的结果集会回表，最终选择全表扫描</p><div class="language-Mysql line-numbers-mode" data-ext="Mysql"><pre class="language-Mysql"><code>EXPLAIN SELECT * FROM employees WHERE name &lt;&#39;LiLei&#39; AND age = 23 AND position =&#39;manager&#39;; 
EXPLAIN SELECT name FROM employees WHERE name &gt; &#39;LiLei&#39; AND age = 22 AND position =&#39;manager&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一条结果集小，回表的效率高，这里也会命中索引</p><p>第二条索引值包含结果集，不需要回表，直接命中索引</p></li><li><p>强制走索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_name_age_position<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>覆盖索引优化</p><ul><li>覆盖索引：索引字段包含了需要返回的结果集，无需回表操作</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT name,age,position FROM employees WHERE name &gt; &#39;LiLei&#39; AND age = 22 AND position =&#39;manager&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>in和or在表数据量比较大的情况会走索引，在表记录不多的情况下会选择全表扫描</p><p>优化器会对比回表和全表扫描的，优化器根据算法决定走索引还是全表扫描</p></li><li><p><code>like KK% </code>一般情况都会走索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM employees WHERE name like &#39;LiLei%&#39;AND age = 22 AND position =&#39;manager&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>索引下推</strong>:对于辅助的联合索引(name,age,position)，正常情况按照最左前缀原则,这种情况只会走name字段索引，因为根据name字段过滤完，得到的索引行里的age和position是无序的，无法很好的利用索引。</li><li>在MySQL5.6之前的版本，这个查询只能在联合索引里匹配到名字是 <strong>&#39;LiLei&#39; 开头</strong>的索引，然后拿这些索引对应的主键逐个回表，到主键索引上找出相应的记录，再比对<strong>age</strong>和<strong>position</strong>这两个字段的值是否符合</li><li>MySQL 5.6引入了索引下推优化，<strong>可以在索引遍历过程中，对索引中包含的所有字段先做判断，过滤掉不符合条件的记录之后再回表，可以有效的减少回表次数</strong></li><li>使用了索引下推优化后，上面那个查询在联合索引里匹配到名字是 <strong>&#39;LiLei&#39; 开头</strong>的索引之后，同时还会在索引里过滤<strong>age</strong>和<strong>position</strong>这两个字段，拿着过滤完剩下的索引对应的主键id再回表查整行数据。</li></ul></li></ul><h3 id="_3-常见sql深入优化" tabindex="-1"><a class="header-anchor" href="#_3-常见sql深入优化" aria-hidden="true">#</a> 3. 常见sql深入优化</h3><ul><li><p><strong>Order by与Group by优化</strong></p><ul><li>MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。</li><li>order by满足两种情况会使用Using index。 <ul><li>order by语句使用索引最左前列</li><li>使用where子句与order by子句条件列组合满足索引最左前列</li></ul></li><li>尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最左前缀法则</li><li>如果order by的条件不在索引列上，就会产生Using filesort</li><li>能用覆盖索引尽量用覆盖索引</li><li>group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最左前缀法则</li><li>对于groupby的优化如果不需要排序的可以加上<strong>order by null禁止排序</strong></li><li>where高于having，能写在where中的限定条件就不要去having限定了</li></ul></li><li><p><strong>Using filesort文件排序原理详解</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>explain select * from employees where name=&#39;zhuge&#39; ORDER BY position
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>filesort文件排序方式</strong><ul><li>单路排序：是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key,packed_additional_fields &gt; <ol><li>从索引name找到第一个满足 name = ‘zhuge’ 条件的主键 id</li><li>根据主键 id 取出整行，<strong>取出所有字段的值，存入 sort_buffer 中</strong></li><li>从索引name找到下一个满足 name = ‘zhuge’ 条件的主键 id</li><li>重复步骤 2、3 直到不满足 name = ‘zhuge’</li><li>对 sort_buffer 中的数据按照字段 position 进行排序</li><li>返回结果给客户端</li></ol></li><li>双路排序（又叫<strong>回表</strong>排序模式）：是首先根据相应的条件取出相应的<strong>排序字段</strong>和<strong>可以直接定位行</strong>数据的行 ID，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具可以看到sort_mode信息里显示&lt; sort_key, rowid &gt; <ol><li>从索引 name 找到第一个满足 name = ‘zhuge’ 的主键id</li><li>根据主键 id 取出整行，<strong>把排序字段 position 和主键 id 这两个字段放到 sort buffer 中</strong></li><li>从索引 name 取下一个满足 name = ‘zhuge’ 记录的主键 id</li><li>重复 3、4 直到不满足 name = ‘zhuge’</li><li>. 对 sort_buffer 中的字段 position 和主键 id 按照字段 position 进行排序</li><li>遍历排序好的 id 和字段 position，按照 id 的值<strong>回到原表</strong>中取出 所有字段的值返回给客户端</li></ol></li><li>MySQL 通过比较系统变量 max_length_for_sort_data(<strong>默认1024字节</strong>) 的大小和需要查询的字段总大小来判断使用哪种排序模式。</li><li>如果 字段的总长度小于max_length_for_sort_data ，那么使用 单路排序模式；</li><li>如果 字段的总长度大于max_length_for_sort_data ，那么使用 双路排序模∙式。</li></ul></li></ul><blockquote><p>如果全部使用sort_buffer内存排序一般情况下效率会高于磁盘文件排序，但不能因为这个就随便增大sort_buffer(默认1M)，mysql很多参数设置都是做过优化的，不要轻易调整</p></blockquote></li></ul><h3 id="_4-索引设计原则" tabindex="-1"><a class="header-anchor" href="#_4-索引设计原则" aria-hidden="true">#</a> 4. 索引设计原则</h3><ul><li><p><strong>代码先行，索引后上</strong></p></li><li><p><strong>联合索引尽量覆盖条件</strong></p></li><li><p><strong>不要在小基数字段上建立索引</strong></p></li><li><p><strong>长字符串我们可以采用前缀索引</strong></p></li><li><p><strong>where与order by冲突时优先where</strong></p></li><li><p><strong>基于慢sql查询做优化</strong></p></li></ul><h3 id="_5-分页查询" tabindex="-1"><a class="header-anchor" href="#_5-分页查询" aria-hidden="true">#</a> 5.分页查询</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code> select * from employees limit 10000,10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示从表 employees 中取出从 10001 行开始的 10 行记录。看似只查询了 10 条记录，实际这条 SQL 是先读取 10010条记录，然后抛弃前 10000 条记录，然后读到后面 10 条想要的数据。因此要查询一张大表比较靠后的数据，执行效率是非常低的。</p><ul><li><p><strong>根据自增且连续的主键排序的分页查询</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code> select * from employees where id &gt; 90000 limit 5;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>主键自增且连续</li><li>结果是按照主键排序的</li></ul></li><li><p><strong>根据非主键字段排序的分页查询</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN select * from employees ORDER BY name limit 90000,5;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>扫描整个索引并查找到没索引的行(可能要遍历多个索引树)的成本比扫描全表的成本更高，所以优化器放弃使用索引</p></li><li><p>关键是<strong>让排序时返回的字段尽可能少</strong></p></li><li><p>优化</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN  select * from employees e inner join (select id from employees order by name limit 90000,5) ed on e.id = ed.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原 SQL 使用的是 filesort 排序，而优化后的 SQL 使用的是索引排序,查询时间在100万数据的基础上减少了一半以上</p></li></ul></li></ul><h3 id="_6-join关联查询优化" tabindex="-1"><a class="header-anchor" href="#_6-join关联查询优化" aria-hidden="true">#</a> 6. join关联查询优化</h3><p>创建表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 新建表t1</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t1<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>a<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>b<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_a<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>a<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token comment">-- 插入10000条数据到t1</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> insert_t1<span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insert_t1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
	<span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">do</span>
		<span class="token keyword">insert</span> <span class="token keyword">into</span> t1<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">call</span> insert_t1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 新建表t2</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t2 <span class="token operator">like</span> t1<span class="token punctuation">;</span>
<span class="token comment">-- 插入100条数据到t2</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> insert_t2<span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insert_t2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
	<span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">do</span>
		<span class="token keyword">insert</span> <span class="token keyword">into</span> t2<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">call</span> insert_t2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>Nested-Loop Join</strong>（NLJ） 算法（嵌套循环链接）</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN select * from t1 inner join t2 on t1.a= t2.a;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>一次一行循环地从第一张表（称为<strong>驱动表</strong>）中读取行，在这行数据中取到关联字段，根据关联字段在另一张表（<strong>被驱动表</strong>）里取出满足条件的行，然后取出两张表的结果合集</li><li>看执行计划 <ul><li>驱动表是 t2，被驱动表是 t1。先执行的就是驱动表(执行计划结果的id如果一样则按从上到下顺序执行sql)；</li><li>优化器一般会优先选择<strong>小表做驱动表</strong>。<strong>所以使用 inner join 时，排在前面的表并不一定就是驱动表</strong></li><li>当使用left join时，左表是驱动表，右表是被驱动表</li><li>当使用right join时，右表时驱动表，左表是被驱动表</li><li>当使用join时，mysql会选择数据量比较小的表作为驱动表，大表作为被驱动表</li></ul></li><li>使用了 NLJ算法。一般 join 语句中，如果执行计划 Extra 中未出现 <strong>Using join buffer</strong> 则表示使用的 join 算法是 NLJ</li><li>流程： <ul><li>从表 t2 中读取一行数据（如果t2表有查询过滤条件的，会从过滤结果里取出一行数据）</li><li>从第 1 步的数据中，取出关联字段 a，到表 t1 中查找</li><li>取出表 t1 中满足条件的行，跟 t2 中获取到的结果合并，作为结果返回给客户端</li><li>重复上面 3 步</li></ul></li><li>整个过程会读取 t2 表的所有数据(<strong>扫描100行</strong>)，然后遍历这每行数据中字段 a 的值，根据 t2 表中 a 的值索引扫描 t1 表中的对应行(<strong>扫描100次 t1 表的索引，1次扫描可以认为最终只扫描 t1 表一行完整数据，也就是总共 t1 表也扫描了100行</strong>)。因此整个过程扫描了 <strong>200 行</strong>。</li><li>如果被驱动表的关联字段没索引，<strong>使用NLJ算法性能会比较低(下面有详细解释)</strong>，mysql会选择Block Nested-Loop Join算法。</li></ul></li><li><p>**Block Nested-Loop Join(**BNL)（基于块的嵌套循环连接）</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN select * from t1 inner join t2 on t1.b= t2.b;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>把<strong>驱动表</strong>的数据读入到 join_buffer 中，然后扫描<strong>被驱动表</strong>，把<strong>被驱动表</strong>每一行取出来跟 join_buffer 中的数据做对比</p></li><li><p>流程：</p><ul><li>把 t2 的所有数据放入到 <strong>join_buffer</strong> 中</li><li>把表 t1 中每一行取出来，跟 join_buffer 中的数据做对比</li><li>返回满足 join 条件的数据</li></ul></li><li><p>整个过程对表 t1 和 t2 都做了一次全表扫描，因此扫描的总行数为10000(表 t1 的数据总量) + 100(表 t2 的数据总量) =<strong>10100</strong></p></li><li><p>join_buffer 里的数据是无序的，因此对表 t1 中的每一行，都要做 100 次判断，所以内存中的判断次数是100 * 10000= <strong>100 万次</strong></p></li><li><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。如果放不下表 t2 的所有数据话，策略很简单，就是<strong>分段放</strong></p></li></ul></li><li><p>没有索引关联的时候一般会选择BNL,有索引是使用NLJ</p></li><li><p><strong>对于关联sql的优化</strong></p><ul><li><strong>关联字段加索引</strong>，让mysql做join操作时尽量选择NLJ算法</li><li><strong>小表驱动大表</strong>，写多表连接sql时如果<strong>明确知道</strong>哪张表是小表可以用straight_join写法固定连接驱动方式，省去mysql优化器自己判断的时间 <ul><li><strong>straight_join解释：straight_join</strong>功能同join类似，但能让左边的表来驱动右边的表，能改表优化器对于联表查询的执行顺序。</li><li><strong>straight_join</strong>只适用于inner join，并不适用于left join，right join。（因为left join，right join已经代表指定了表的执行顺序）</li><li>尽可能让优化器去判断，因为大部分情况下mysql优化器是比人要聪明的。使用<strong>straight_join</strong>一定要慎重，因为部分情况下人为指定的执行顺序并不一定会比优化引擎要靠谱。</li></ul></li></ul></li><li><p><strong>对于小表定义的明确</strong></p><ul><li>在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，<strong>过滤完成之后</strong>，计算参与 join 的各个字段的总数据量，<strong>数据量小的那个表，就是“小表”</strong>，应该作为驱动表</li></ul></li><li><p><strong>in和exsits优化</strong></p><ul><li><p>原则：<strong>小表驱动大表</strong>，即小的数据集驱动大的数据集</p></li><li><p>当B表的数据集小于A表的数据集时，in优于exists</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from A where id in (select id from B)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等价于</p><blockquote><p>for(select id from B){</p><p>​ select * from A where A.id = B.id</p><p>}</p></blockquote></li><li><p>当A表的数据集小于B表的数据集时，exists优于in</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from A where exists (select 1 from B where B.id = A.id)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等价于</p><blockquote><p>for(select * from A){</p><p>​ select * from B where B.id = A.id</p><p>}</p></blockquote></li><li><p>EXISTS (subquery)只返回TRUE或FALSE,因此子查询中的SELECT * 也可以用SELECT 1替换,官方说法是实际执行时会忽略SELECT清单,因此没有区别</p></li><li><p>EXISTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比</p></li><li><p>EXISTS子查询往往也可以用JOIN来代替，何种最优需要具体问题具体分析</p></li></ul></li></ul><h3 id="_7-count-查询优化" tabindex="-1"><a class="header-anchor" href="#_7-count-查询优化" aria-hidden="true">#</a> 7. count(*)查询优化</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 临时关闭mysql查询缓存，为了查看sql多次执行的真实时间</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> query_cache_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> query_cache_type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">-- sql1 </span>
 <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>
<span class="token comment">-- sql2</span>
 <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>
<span class="token comment">-- sql3 </span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>
<span class="token comment">-- sql4 </span>
 <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上4条sql只有根据某个字段count不会统计字段为null值的数据行四个sql的执行计划一样，说明这四个sql执行效率应该差不多</p><ul><li><p>字段有索引</p><ul><li><strong>count(*)≈count(1)&gt;count(字段)&gt;count(主键 id)</strong></li></ul></li><li><p>字段无索引</p><ul><li><strong>count(*)≈count(1)&gt;count(主键 id)&gt;count(字段)</strong></li></ul></li><li><p>count(1)跟count(字段)执行过程类似，不过count(1)不需要取出字段统计，就用常量1做统计，count(字段)还需要取出字段，所以理论上count(1)比count(字段)会快一点</p></li><li><p>count(<em>) 是例外，mysql并不会把全部字段取出来，而是专门做了优化，不取值，按行累加，效率很高，所以不需要用count(列名)或count(常量)来替代 count(</em>)。</p></li><li><p>为什么对于count(id)，mysql最终选择辅助索引而不是主键聚集索引？因为二级索引相对主键索引存储数据更少，检索性能应该更高，mysql内部做了点优化(应该是在5.7版本才优化)</p></li><li><p>常见优化方法</p><ul><li><p>查询mysql自己维护的总行数</p><ul><li>对于<strong>myisam存储引擎</strong>的表做不带where条件的count查询性能是很高的，因为myisam存储引擎的表的总行数会被mysql存储在磁盘上，查询不需要计算</li><li>对于<strong>innodb存储引擎</strong>的表mysql不会存储表的总记录行数(因为有MVCC机制，后面会讲)，查询count需要实时计算</li></ul></li><li><p>show table status</p><ul><li><p>如果只需要知道表总行数的估计值可以用如下sql查询，性能很高</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show table status like &#39;employees&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>将总数维护到Redis里</p><ul><li>插入或删除表数据行的时候同时维护redis里的表总行数key的计数值(用incr或decr命令)，但是这种方式可能不准，很难保证表操作和redis操作的事务一致性</li></ul></li><li><p>增加数据库计数表</p><ul><li>插入或删除表数据行的时候同时维护计数表，让他们在同一个事务里操作</li></ul></li></ul></li></ul><h3 id="_8-mysql规范解读" tabindex="-1"><a class="header-anchor" href="#_8-mysql规范解读" aria-hidden="true">#</a> 8. Mysql规范解读</h3><p><strong>MySQL数据类型选择</strong></p><ul><li><p>确定合适的大类型：数字、字符串、时间、二进制；</p></li><li><p>确定具体的类型：有无符号、取值范围、变长定长等。</p></li><li><p>数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 字节</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 字节</td><td>(-32 768, 32 767)</td><td>(0, 65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 字节</td><td>(-8 388 608, 8 388 607)</td><td>(0, 16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 字节</td><td>(-2 147 483 648, 2 147483 647)</td><td>(0, 4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 字节</td><td></td><td></td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 字节</td><td></td><td></td><td>单精度浮点数</td></tr><tr><td>DOUBLE</td><td>8 字节</td><td></td><td></td><td>双进度浮点数</td></tr><tr><td>DECIMAL(M,D)</td><td>如果M&gt;D，为M+2否则为D+2</td><td></td><td></td><td>小数值</td></tr></tbody></table><ul><li>如果整形数据没有负数，如ID号，建议指定为UNSIGNED无符号类型，容量可以扩大一倍</li><li>建议使用TINYINT代替ENUM、BITENUM、SET</li><li>避免使用整数的显示宽度(参看文档最后)，也就是说，不要用INT(10)类似的方法指定字段显示宽度，直接用INT。</li><li>DECIMAL最适合保存准确度要求高，而且用于计算的数据，比如价格。但是在使用DECIMAL类型的时候，注意长度设置。</li><li>建议使用整形类型来运算和存储实数，方法是，实数乘以相应的倍数后再操作</li><li>整数通常是最佳的数据类型，因为它速度快，并且能使用AUTO_INCREMENT</li></ul></li><li><p><strong>日期和时间</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 到 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59&#39; 到 &#39;838:59:59&#39;</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 到 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 到 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAM</td><td>4</td><td>1970-01-01 00:00:00 到 2038-01-19 03:14:07</td><td>YYYYMMDDhhmmss</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><ul><li>MySQL能存储的最小时间粒度为秒</li><li>建议用DATE数据类型来保存日期。MySQL中默认的日期格式是yyyy-mm-dd</li><li>用MySQL的内建类型DATE、TIME、DATETIME来存储时间，而不是使用字符串</li><li>当数据格式为TIMESTAMP和DATETIME时，可以用CURRENT_TIMESTAMP作为默认（MySQL5.6以后），MySQL会自动返回记录插入的确切时间。</li><li>TIMESTAMP是UTC时间戳，与时区相关</li><li>DATETIME的存储格式是一个YYYYMMDD HH:MM:SS的整数，与时区无关，你存了什么，读出来就是什么</li><li>除非有特殊需求，一般的公司建议使用TIMESTAMP，它比DATETIME更节约空间，但是像阿里这样的公司一般会用DATETIME，因为不用考虑TIMESTAMP将来的时间上限问题。</li><li>有时人们把Unix的时间戳保存为整数值，但是这通常没有任何好处，这种格式处理起来不太方便，我们并不推荐它</li></ul></li><li><p>字符串</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串，char(n)当插入的字符串实际长度不足n时，插入空格进行补充保存。在进行检索时，尾部的空格会被去掉。</td></tr><tr><td>VARCHAR</td><td>0-65535 字节</td><td>变长字符串，varchar(n)中的n代表最大列长度，插入的</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>字符串实际长度不足n时不会补充空格不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><ul><li>字符串的长度相差较大用VARCHAR；字符串短，且所有值都接近一个长度用CHAR。</li><li>. CHAR和VARCHAR适用于包括人名、邮政编码、电话号码和不超过255个字符长度的任意字母数字组合。那些要用来计算的数字不要用VARCHAR类型保存，因为可能会导致一些与计算相关的问题。换句话说，可能影响到计算的准确性和完整性。</li><li>尽量少用BLOB和TEXT，如果实在要用可以考虑将BLOB和TEXT字段单独存一张表，用id关联</li><li>BLOB系列存储二进制字符串，与字符集无关。TEXT系列存储非二进制字符串，与字符集相关</li><li>BLOB和TEXT都不能有默认值</li></ul></li></ul>`,28),i=[l];function o(p,d){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","Mysql索引优化实战.html.vue"]]);export{r as default};
