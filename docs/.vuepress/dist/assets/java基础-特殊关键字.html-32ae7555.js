import{_ as a,p as n,q as s,a1 as l}from"./framework-8fa3e4ce.js";const i={},e=l(`<h1 id="java基础-特殊关键字" tabindex="-1"><a class="header-anchor" href="#java基础-特殊关键字" aria-hidden="true">#</a> java基础-特殊关键字</h1><h2 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h2><p>表示修饰的对象不可变，主要有以下场景：</p><ol><li>数据：声明数据类常量，可以是编译时常量，也可以是运行时被初始化后不能被改变的常量 <ul><li>对于基本数据类型，final使数值不变。</li><li>对于引用类型，final使引用不变，但是被引用的对象本身是可以被改变的。</li></ul></li><li>方法：声明方法，表示方法不能被子类重写。 <ul><li>private方法被隐式的指令为final，如果子类存和父类（父类方法被private修饰）存在相同的方法，此时子类并不是重写父类方法，而是定义了一个新的方法。</li></ul></li><li>类：表示类不可被继承。</li></ol><h2 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h2><p>翻译成静态的，这里可以理解为只能被初始化一次</p><ol><li><p>静态变量</p><ul><li>静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它；静态变量在内存中只存在一份。这个是在类加载器加载类时初始化的。</li><li>实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死</li></ul></li><li><p>静态方法</p><ul><li>静态方法在类加载时初始化，不依赖任何实例。所以静态方法必须有实现，即不能为抽象方法</li><li>方法中不能有this和super关键字</li></ul></li><li><p>静态语句块：静态语句块在类初始化时运行一次</p></li><li><p>静态内部类</p><ul><li>非静态内部类依赖于外部类的实例，而静态内部类不需要</li><li>静态内部类不能访问外部类的非静态的变量和方法。</li></ul></li><li><p>静态导包</p></li></ol><ul><li>在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低（不建议这么做）</li></ul><ol start="6"><li>初始化顺序 <ul><li>父类(静态变量、静态语句块)</li><li>子类(静态变量、静态语句块)</li><li>父类(实例变量、普通语句块)</li><li>父类(构造函数)</li><li>子类(实例变量、普通语句块)</li><li>子类(构造函数)</li></ul></li></ol><h2 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super</h2><ul><li>访问父类的构造函数: 可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。</li><li>访问父类的成员: 如果子类重写了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。</li></ul><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> synchronized</h2><p>被称为同步代码块，在应用Sychronized关键字时需要把握如下注意点：</p><ul><li>一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；</li><li>每个实例都对应有自己的一把锁(this),不同实例之间互不影响；例外：锁对象是*.class以及synchronized修饰的是static方法的时候，所有对象公用同一把锁</li><li>synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁 <strong>对象锁</strong> 包括方法锁(默认锁对象为this,当前实例对象)和同步代码块锁(自己指定锁对象)</li></ul><ol><li>代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">Object</span> block1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>block1<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>方法锁形式：synchronized修饰普通方法，锁对象默认为this</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类锁</strong> 指synchronize修饰静态的方法或指定锁对象为Class对象</p><ol start="3"><li>synchronize修饰静态方法 <ul><li>synchronized用在静态方法上，默认的锁就是当前所在的Class类，所以无论是哪个线程访问它，需要的锁都只有一把</li></ul></li><li>synchronized指定锁对象为Class对象 <ul><li>所有线程需要的锁都是同一把</li></ul></li></ol><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h2><p>volatile提供了另一种解决可见性和有序性问题的方案 <strong>防重排序</strong><strong>实现可见性</strong></p>`,22),t=[e];function o(c,p){return n(),s("div",null,t)}const d=a(i,[["render",o],["__file","java基础-特殊关键字.html.vue"]]);export{d as default};
